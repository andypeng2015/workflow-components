#!/usr/bin/env node

const path = require("path");
const baseSpace = "/root/src"
const cacheSpace = "/workflow-cache"

// builder
function Builder(envs) {
  if (envs["GIT_CLONE_URL"]) {
    this.gitCloneURL = envs["GIT_CLONE_URL"].replace(/\/$/, "");
    this.gitRef = envs["GIT_REF"] ||  "master";
  } else if (envs["_WORKFLOW_GIT_CLONE_URL"]) {
    this.gitCloneURL = envs["_WORKFLOW_GIT_CLONE_URL"].replace(/\/$/, "");
    this.gitRef = envs["_WORKFLOW_GIT_REF"] ||  "master";
  }
  if (!this.gitCloneURL) {
    console.error("envionment variables GIT_CLONE_URL is required");
    process.exit(1);
  }

  this.testPath = envs["TEST_PATH"] || 'test/*';
  this.testParams = envs["TEST_PARAMS"] || '';

  let paths = this.gitCloneURL.replace(/\.git$/, "").split('/');
  this.projectName = paths[paths.length - 1];

  this.workflowCache = (envs["_WORKFLOW_FLAG_CACHE"] || "").toLowerCase() == "true"
  if (this.workflowCache) {
      this.workDir = cacheSpace
  } else {
      this.workDir = baseSpace
  }
  this.gitDir = path.join(this.workDir, this.projectName);
}

Builder.prototype.gitPull = async function() {
  let cmd = new CMD(`git clone --recurse-submodules ${this.gitCloneURL} ${this.projectName}`, this.workDir);
  await cmd.run();
};

Builder.prototype.gitReset = async function() {
  let cmd = new CMD(`git checkout ${this.gitRef} --`, this.gitDir);
  await cmd.run();
};

Builder.prototype.test = async function() {
  let cmd = new CMD(`mocha ${this.testParams} ${this.testPath}`, this.gitDir);
  await cmd.run();
};

Builder.prototype.npmInstall = async function() {
  let cmd = new CMD(`npm install`, this.gitDir);
  await cmd.run();
};

Builder.prototype.run = async function() {
  try {
    if (!require('fs').existsSync(this.gitDir)) {
      await this.gitPull();
      await this.gitReset();
      await this.npmInstall();
    }
    await this.test();
  } catch (e) {
    console.error("BUILD FAILED: ", e.message);
    process.exit(1);
  }
};

function CMD(command, cwd) {
  this.command = command;
  this.cwd = cwd;
}

CMD.prototype.run = function() {
  let cmd = this;
  let promise = new Promise(function(resolve, reject) {
    console.log(`Run CMD ${cmd.cwd ? 'in ' + cmd.cwd : ''}: ${cmd.command}`);

    let exec = require('child_process').exec;
    let e = exec(cmd.command, {cwd: cmd.cwd});
    let stdout, stderr;

    e.stdout.on('data', data =>{
      stdout = stdout + data;
      process.stdout.write(data);
    });
    e.stderr.on('data', data =>{
      stderr = stderr + data;
      process.stderr.write(data);
    });

    e.on('exit', (code) => {
      if (code == 0 || code == null) {
        resolve(stdout);
      } else {
        reject(new Error(`CMD (${cmd.command}) error with code ${code}`));
      }
    });
  });
  return promise;
};

// main
const envList = [
  "GIT_CLONE_URL", "GIT_REF",
  "_WORKFLOW_GIT_CLONE_URL", "_WORKFLOW_GIT_REF",
  "TEST_PATH", "TEST_PARAMS",

  "_WORKFLOW_FLAG_CACHE"
];
let envs = {};
for (let envName of envList) {
  envs[envName] = process.env[envName];
}
(new Builder(envs)).run();
